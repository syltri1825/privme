Events
Introduction
Registering Events & Listeners
Generating Events & Listeners
Manually Registering Events
Event Discovery
Defining Events
Defining Listeners
Queued Event Listeners
Manually Interacting With The Queue
Queued Event Listeners & Database Transactions
Handling Failed Jobs
Dispatching Events
Event Subscribers
Writing Event Subscribers
Registering Event Subscribers
Introduction
Laravel's events provide a simple observer pattern implementation, allowing you to subscribe and listen for various events that occur within your application. Event classes are typically stored in the app/Events directory, while their listeners are stored in app/Listeners. Don't worry if you don't see these directories in your application as they will be created for you as you generate events and listeners using Artisan console commands.

Events serve as a great way to decouple various aspects of your application, since a single event can have multiple listeners that do not depend on each other. For example, you may wish to send a Slack notification to your user each time an order has shipped. Instead of coupling your order processing code to your Slack notification code, you can raise an App\Events\OrderShipped event which a listener can receive and use to dispatch a Slack notification.

Registering Events & Listeners
The App\Providers\EventServiceProvider included with your Laravel application provides a convenient place to register all of your application's event listeners. The listen property contains an array of all events (keys) and their listeners (values). You may add as many events to this array as your application requires. For example, let's add an OrderShipped event:

use App\Events\OrderShipped;
use App\Listeners\SendShipmentNotification;
 
/**
 * The event listener mappings for the application.
 *
 * @var array
 */
protected $listen = [
    OrderShipped::class => [
        SendShipmentNotification::class,
    ],
];


The event:list command may be used to display a list of all events and listeners registered by your application.


Generating Events & Listeners
Of course, manually creating the files for each event and listener is cumbersome. Instead, add listeners and events to your EventServiceProvider and use the event:generate Artisan command. This command will generate any events or listeners that are listed in your EventServiceProvider that do not already exist:

php artisan event:generate

Alternatively, you may use the make:event and make:listener Artisan commands to generate individual events and listeners:

php artisan make:event PodcastProcessed
 
php artisan make:listener SendPodcastNotification --event=PodcastProcessed

Manually Registering Events
Typically, events should be registered via the EventServiceProvider $listen array; however, you may also register class or closure based event listeners manually in the boot method of your EventServiceProvider:

use App\Events\PodcastProcessed;
use App\Listeners\SendPodcastNotification;
use Illuminate\Support\Facades\Event;
 
/**
 * Register any other events for your application.
 *
 * @return void
 */
public function boot()
{
    Event::listen(
        PodcastProcessed::class,
        [SendPodcastNotification::class, 'handle']
    );
 
    Event::listen(function (PodcastProcessed $event) {
        //
    });
}

Queueable Anonymous Event Listeners
When registering closure based event listeners manually, you may wrap the listener closure within the Illuminate\Events\queueable function to instruct Laravel to execute the listener using the queue:

use App\Events\PodcastProcessed;
use function Illuminate\Events\queueable;
use Illuminate\Support\Facades\Event;
 
/**
 * Register any other events for your application.
 *
 * @return void
 */
public function boot()
{
    Event::listen(queueable(function (PodcastProcessed $event) {
        //
    }));
}

Like queued jobs, you may use the onConnection, onQueue, and delay methods to customize the execution of the queued listener:

Event::listen(queueable(function (PodcastProcessed $event) {
    //
})->onConnection('redis')->onQueue('podcasts')->delay(now()->addSeconds(10)));

If you would like to handle anonymous queued listener failures, you may provide a closure to the catch method while defining the queueable listener. This closure will receive the event instance and the Throwable instance that caused the listener's failure:

use App\Events\PodcastProcessed;
use function Illuminate\Events\queueable;
use Illuminate\Support\Facades\Event;
use Throwable;
 
Event::listen(queueable(function (PodcastProcessed $event) {
    //
})->catch(function (PodcastProcessed $event, Throwable $e) {
    // The queued listener failed...
}));

Wildcard Event Listeners
You may even register listeners using the * as a wildcard parameter, allowing you to catch multiple events on the same listener. Wildcard listeners receive the event name as their first argument and the entire event data array as their second argument:

Event::listen('event.*', function ($eventName, array $data) {
    //
});

Event Discovery
Instead of registering events and listeners manually in the $listen array of the EventServiceProvider, you can enable automatic event discovery. When event discovery is enabled, Laravel will automatically find and register your events and listeners by scanning your application's Listeners directory. In addition, any explicitly defined events listed in the EventServiceProvider will still be registered.

Laravel finds event listeners by scanning the listener classes using PHP's reflection services. When Laravel finds any listener class method that begins with handle or __invoke, Laravel will register those methods as event listeners for the event that is type-hinted in the method's signature:

use App\Events\PodcastProcessed;
 
class SendPodcastNotification
{
    /**
     * Handle the given event.
     *
     * @param  \App\Events\PodcastProcessed  $event
     * @return void
     */
    public function handle(PodcastProcessed $event)
    {
        //
    }
}

Event discovery is disabled by default, but you can enable it by overriding the shouldDiscoverEvents method of your application's EventServiceProvider:

/**
 * Determine if events and listeners should be automatically discovered.
 *
 * @return bool
 */
public function shouldDiscoverEvents()
{
    return true;
}

By default, all listeners within your application's app/Listeners directory will be scanned. If you would like to define additional directories to scan, you may override the discoverEventsWithin method in your EventServiceProvider:

/**
 * Get the listener directories that should be used to discover events.
 *
 * @return array
 */
protected function discoverEventsWithin()
{
    return [
        $this->app->path('Listeners'),
    ];
}

Event Discovery In Production
In production, it is not efficient for the framework to scan all of your listeners on every request. Therefore, during your deployment process, you should run the event:cache Artisan command to cache a manifest of all of your application's events and listeners. This manifest will be used by the framework to speed up the event registration process. The event:clear command may be used to destroy the cache.

Defining Events
An event class is essentially a data container which holds the information related to the event. For example, let's assume an App\Events\OrderShipped event receives an Eloquent ORM object:

<?php
 
namespace App\Events;
 
use App\Models\Order;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;
 
class OrderShipped
{
    use Dispatchable, InteractsWithSockets, SerializesModels;
 
    /**
     * The order instance.
     *
     * @var \App\Models\Order
     */
    public $order;
 
    /**
     * Create a new event instance.
     *
     * @param  \App\Models\Order  $order
     * @return void
     */
    public function __construct(Order $order)
    {
        $this->order = $order;
    }
}

As you can see, this event class contains no logic. It is a container for the App\Models\Order instance that was purchased. The SerializesModels trait used by the event will gracefully serialize any Eloquent models if the event object is serialized using PHP's serialize function, such as when utilizing queued listeners.

Defining Listeners
Next, let's take a look at the listener for our example event. Event listeners receive event instances in their handle method. The event:generate and make:listener Artisan commands will automatically import the proper event class and type-hint the event on the handle method. Within the handle method, you may perform any actions necessary to respond to the event:

<?php
 
namespace App\Listeners;
 
use App\Events\OrderShipped;
 
class SendShipmentNotification
{
    /**
     * Create the event listener.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }
 
    /**
     * Handle the event.
     *
     * @param  \App\Events\OrderShipped  $event
     * @return void
     */
    public function handle(OrderShipped $event)
    {
        // Access the order using $event->order...
    }
}


Vos écouteurs d'événement peuvent également indiquer les dépendances dont ils ont besoin sur leurs constructeurs. Tous les écouteurs d'événements sont résolus via le conteneur de service Laravel , les dépendances seront donc injectées automatiquement.


Arrêter la propagation d'un événement
Parfois, vous souhaiterez peut-être arrêter la propagation d'un événement à d'autres auditeurs. Vous pouvez le faire en revenant de la méthode falsede votre auditeur handle.

Écouteurs d'événements en file d'attente
La mise en file d'attente des écouteurs peut être bénéfique si votre écouteur va effectuer une tâche lente comme envoyer un e-mail ou faire une requête HTTP. Avant d'utiliser des écouteurs en file d'attente, assurez-vous de configurer votre file d'attente et de démarrer un agent de file d'attente sur votre serveur ou votre environnement de développement local.

Pour spécifier qu'un écouteur doit être mis en file d'attente, ajoutez l' ShouldQueueinterface à la classe d'écouteur. Les écouteurs générés par les commandes event:generateet make:listenerArtisan ont déjà cette interface importée dans l'espace de noms actuel afin que vous puissiez l'utiliser immédiatement :

<?php
 
namespace App\Listeners;
 
use App\Events\OrderShipped;
use Illuminate\Contracts\Queue\ShouldQueue;
 
class SendShipmentNotification implements ShouldQueue
{
    //
}

C'est ça! Désormais, lorsqu'un événement géré par cet écouteur est distribué, l'écouteur sera automatiquement mis en file d'attente par le répartiteur d'événements à l'aide du système de file d'attente de Laravel . Si aucune exception n'est levée lorsque le programme d'écoute est exécuté par la file d'attente, le travail en file d'attente sera automatiquement supprimé une fois son traitement terminé.

Personnalisation de la connexion à la file d'attente et du nom de la file d'attente
Si vous souhaitez personnaliser la connexion à la file d'attente, le nom de la file d'attente ou le délai de la file d'attente d'un écouteur d'événement, vous pouvez définir les propriétés $connection, $queueou $delaysur votre classe d'écoute :

<?php
 
namespace App\Listeners;
 
use App\Events\OrderShipped;
use Illuminate\Contracts\Queue\ShouldQueue;
 
class SendShipmentNotification implements ShouldQueue
{
    /**
     * The name of the connection the job should be sent to.
     *
     * @var string|null
     */
    public $connection = 'sqs';
 
    /**
     * The name of the queue the job should be sent to.
     *
     * @var string|null
     */
    public $queue = 'listeners';
 
    /**
     * The time (seconds) before the job should be processed.
     *
     * @var int
     */
    public $delay = 60;
}

Si vous souhaitez définir la connexion à la file d'attente de l'écouteur ou le nom de la file d'attente lors de l'exécution, vous pouvez définir viaConnectionou viaQueueméthodes sur l'écouteur :

/**
 * Get the name of the listener's queue connection.
 *
 * @return string
 */
public function viaConnection()
{
    return 'sqs';
}
 
/**
 * Get the name of the listener's queue.
 *
 * @return string
 */
public function viaQueue()
{
    return 'listeners';
}

Auditeurs de mise en file d'attente conditionnelle
Parfois, vous devrez peut-être déterminer si un écouteur doit être mis en file d'attente en fonction de certaines données qui ne sont disponibles qu'au moment de l'exécution. Pour ce faire, une shouldQueueméthode peut être ajoutée à un écouteur pour déterminer si l'écouteur doit être mis en file d'attente. Si la shouldQueueméthode renvoie false, l'écouteur ne sera pas exécuté :

<?php
 
namespace App\Listeners;
 
use App\Events\OrderCreated;
use Illuminate\Contracts\Queue\ShouldQueue;
 
class RewardGiftCard implements ShouldQueue
{
    /**
     * Reward a gift card to the customer.
     *
     * @param  \App\Events\OrderCreated  $event
     * @return void
     */
    public function handle(OrderCreated $event)
    {
        //
    }
 
    /**
     * Determine whether the listener should be queued.
     *
     * @param  \App\Events\OrderCreated  $event
     * @return bool
     */
    public function shouldQueue(OrderCreated $event)
    {
        return $event->order->subtotal >= 5000;
    }
}

Interagir manuellement avec la file d'attente
deleteSi vous avez besoin d'accéder manuellement aux tâches et méthodes de la file d'attente sous-jacente de l'écouteur release, vous pouvez le faire en utilisant le Illuminate\Queue\InteractsWithQueuetrait. Ce trait est importé par défaut sur les écouteurs générés et donne accès à ces méthodes :

<?php
 
namespace App\Listeners;
 
use App\Events\OrderShipped;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;
 
class SendShipmentNotification implements ShouldQueue
{
    use InteractsWithQueue;
 
    /**
     * Handle the event.
     *
     * @param  \App\Events\OrderShipped  $event
     * @return void
     */
    public function handle(OrderShipped $event)
    {
        if (true) {
            $this->release(30);
        }
    }
}

Écouteurs d'événements en file d'attente et transactions de base de données
Lorsque des écouteurs en file d'attente sont distribués dans des transactions de base de données, ils peuvent être traités par la file d'attente avant que la transaction de base de données ne soit validée. Lorsque cela se produit, les mises à jour que vous avez apportées aux modèles ou aux enregistrements de base de données lors de la transaction de base de données peuvent ne pas encore être reflétées dans la base de données. De plus, tous les modèles ou enregistrements de base de données créés dans la transaction peuvent ne pas exister dans la base de données. Si votre écouteur dépend de ces modèles, des erreurs inattendues peuvent se produire lors du traitement du travail qui distribue l'écouteur en file d'attente.

Si l' after_commitoption de configuration de votre connexion à la file d'attente est définie sur false, vous pouvez toujours indiquer qu'un écouteur particulier en file d'attente doit être distribué après que toutes les transactions de base de données ouvertes ont été validées en définissant une $afterCommitpropriété sur la classe d'écoute :

<?php
 
namespace App\Listeners;
 
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;
 
class SendShipmentNotification implements ShouldQueue
{
    use InteractsWithQueue;
 
    public $afterCommit = true;
}


Pour en savoir plus sur la façon de contourner ces problèmes, veuillez consulter la documentation relative aux travaux en file d'attente et aux transactions de base de données .


Gestion des travaux échoués
Parfois, vos écouteurs d'événements en file d'attente peuvent échouer. Si l'écouteur en file d'attente dépasse le nombre maximal de tentatives défini par votre exécuteur de file d'attente, la failedméthode sera appelée sur votre écouteur. La failedméthode reçoit l'instance d'événement et celle Throwablequi a causé l'échec :

<?php
 
namespace App\Listeners;
 
use App\Events\OrderShipped;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;
 
class SendShipmentNotification implements ShouldQueue
{
    use InteractsWithQueue;
 
    /**
     * Handle the event.
     *
     * @param  \App\Events\OrderShipped  $event
     * @return void
     */
    public function handle(OrderShipped $event)
    {
        //
    }
 
    /**
     * Handle a job failure.
     *
     * @param  \App\Events\OrderShipped  $event
     * @param  \Throwable  $exception
     * @return void
     */
    public function failed(OrderShipped $event, $exception)
    {
        //
    }
}

Spécification du nombre maximal de tentatives d'écoute en file d'attente
Si l'un de vos écouteurs en file d'attente rencontre une erreur, vous ne voulez probablement pas qu'il continue à réessayer indéfiniment. Par conséquent, Laravel fournit différentes manières de spécifier combien de fois ou pendant combien de temps un écouteur peut être tenté.

Vous pouvez définir une $triespropriété sur votre classe d'écouteur pour spécifier combien de fois l'écouteur peut être tenté avant qu'il ne soit considéré comme ayant échoué :

<?php
 
namespace App\Listeners;
 
use App\Events\OrderShipped;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;
 
class SendShipmentNotification implements ShouldQueue
{
    use InteractsWithQueue;
 
    /**
     * The number of times the queued listener may be attempted.
     *
     * @var int
     */
    public $tries = 5;
}

Au lieu de définir combien de fois un écouteur peut être tenté avant qu'il échoue, vous pouvez définir un moment auquel l'écouteur ne doit plus être tenté. Cela permet à un auditeur d'être tenté un certain nombre de fois dans un laps de temps donné. Pour définir l'heure à laquelle un écouteur ne doit plus être tenté, ajoutez une retryUntilméthode à votre classe d'écouteur. Cette méthode doit renvoyer une DateTimeinstance :

/**
 * Determine the time at which the listener should timeout.
 *
 * @return \DateTime
 */
public function retryUntil()
{
    return now()->addMinutes(5);
}

Répartition des événements
Pour envoyer un événement, vous pouvez appeler la méthode statique dispatchsur l'événement. Cette méthode est rendue disponible sur l'événement par le Illuminate\Foundation\Events\Dispatchabletrait. Tous les arguments passés à la dispatchméthode seront passés au constructeur de l'événement :

<?php
 
namespace App\Http\Controllers;
 
use App\Events\OrderShipped;
use App\Http\Controllers\Controller;
use App\Models\Order;
use Illuminate\Http\Request;
 
class OrderShipmentController extends Controller
{
    /**
     * Ship the given order.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $order = Order::findOrFail($request->order_id);
 
        // Order shipment logic...
 
        OrderShipped::dispatch($order);
    }
}

Si vous souhaitez envoyer conditionnellement un événement, vous pouvez utiliser les méthodes dispatchIfet :dispatchUnless

OrderShipped::dispatchIf($condition, $order);
 
OrderShipped::dispatchUnless($condition, $order);


Lors des tests, il peut être utile d'affirmer que certains événements ont été envoyés sans réellement déclencher leurs écouteurs. Les assistants de test intégrés de Laravel en font un jeu d'enfant.


Abonnés à l'événement
Écrire des abonnés à des événements
Les abonnés aux événements sont des classes qui peuvent s'abonner à plusieurs événements à partir de la classe d'abonnés elle-même, ce qui vous permet de définir plusieurs gestionnaires d'événements au sein d'une même classe. Les abonnés doivent définir une subscribeméthode, qui sera transmise à une instance de répartiteur d'événements. Vous pouvez appeler la listenméthode sur le répartiteur donné pour enregistrer les écouteurs d'événements :

<?php
 
namespace App\Listeners;
 
use Illuminate\Auth\Events\Login;
use Illuminate\Auth\Events\Logout;
 
class UserEventSubscriber
{
    /**
     * Handle user login events.
     */
    public function handleUserLogin($event) {}
 
    /**
     * Handle user logout events.
     */
    public function handleUserLogout($event) {}
 
    /**
     * Register the listeners for the subscriber.
     *
     * @param  \Illuminate\Events\Dispatcher  $events
     * @return void
     */
    public function subscribe($events)
    {
        $events->listen(
            Login::class,
            [UserEventSubscriber::class, 'handleUserLogin']
        );
 
        $events->listen(
            Logout::class,
            [UserEventSubscriber::class, 'handleUserLogout']
        );
    }
}

Si vos méthodes d'écouteur d'événements sont définies dans l'abonné lui-même, vous trouverez peut-être plus pratique de renvoyer un tableau d'événements et de noms de méthode à partir de la méthode de l'abonné subscribe. Laravel déterminera automatiquement le nom de classe de l'abonné lors de l'enregistrement des écouteurs d'événement :

<?php
 
namespace App\Listeners;
 
use Illuminate\Auth\Events\Login;
use Illuminate\Auth\Events\Logout;
 
class UserEventSubscriber
{
    /**
     * Handle user login events.
     */
    public function handleUserLogin($event) {}
 
    /**
     * Handle user logout events.
     */
    public function handleUserLogout($event) {}
 
    /**
     * Register the listeners for the subscriber.
     *
     * @param  \Illuminate\Events\Dispatcher  $events
     * @return array
     */
    public function subscribe($events)
    {
        return [
            Login::class => 'handleUserLogin',
            Logout::class => 'handleUserLogout',
        ];
    }
}

Enregistrement des abonnés à l'événement
Après avoir écrit l'abonné, vous êtes prêt à l'enregistrer auprès du répartiteur d'événements. Vous pouvez enregistrer des abonnés utilisant la $subscribepropriété sur le EventServiceProvider. Par exemple, ajoutons le UserEventSubscriberà la liste :

<?php
 
namespace App\Providers;
 
use App\Listeners\UserEventSubscriber;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;
 
class EventServiceProvider extends ServiceProvider
{
    /**
     * The event listener mappings for the application.
     *
     * @var array
     */
    protected $listen = [
        //
    ];
 
    /**
     * The subscriber classes to register.
     *
     * @var array
     */
    protected $subscribe = [
        UserEventSubscriber::class,
    ];
}