Base de données : mise en route
Introduction
Configuration
Connexions en lecture et en écriture
Exécution de requêtes SQL
Utilisation de plusieurs connexions à la base de données
Écoute des événements de requête
Surveillance du temps de requête cumulé
Transactions de base de données
Connexion à la CLI de la base de données
Introduction
Presque toutes les applications Web modernes interagissent avec une base de données. Laravel rend l'interaction avec les bases de données extrêmement simple sur une variété de bases de données prises en charge à l'aide de SQL brut, d'un générateur de requêtes fluide et de l' ORM Eloquent . Actuellement, Laravel fournit un support de première partie pour cinq bases de données :

MariaDB 10.2+ ( politique de version )
MySQL 5.7+ ( politique de version )
PostgreSQL 10.0+ ( politique de version )
SQLite 3.8.8+
SQL Server 2017+ ( politique de version )
Configuration
La configuration des services de base de données de Laravel se trouve dans le config/database.phpfichier de configuration de votre application. Dans ce fichier, vous pouvez définir toutes vos connexions à la base de données, ainsi que spécifier quelle connexion doit être utilisée par défaut. La plupart des options de configuration de ce fichier sont pilotées par les valeurs des variables d'environnement de votre application. Des exemples pour la plupart des systèmes de base de données pris en charge par Laravel sont fournis dans ce fichier.

Par défaut, l'exemple de configuration d'environnement de Laravel est prêt à être utilisé avec Laravel Sail , qui est une configuration Docker pour développer des applications Laravel sur votre machine locale. Cependant, vous êtes libre de modifier la configuration de votre base de données selon les besoins de votre base de données locale.

Configuration SQLite
Les bases de données SQLite sont contenues dans un seul fichier sur votre système de fichiers. Vous pouvez créer une nouvelle base de données SQLite en utilisant la touchcommande dans votre terminal : touch database/database.sqlite. Une fois la base de données créée, vous pouvez facilement configurer vos variables d'environnement pour qu'elles pointent vers cette base de données en plaçant le chemin absolu vers la base de données dans la DB_DATABASEvariable d'environnement :

DB_CONNECTION=sqlite
DB_DATABASE=/absolute/path/to/database.sqlite

Pour activer les contraintes de clé étrangère pour les connexions SQLite, vous devez définir la DB_FOREIGN_KEYSvariable d'environnement surtrue :

DB_FOREIGN_KEYS=true

Configuration du serveur Microsoft SQL
Pour utiliser une base de données Microsoft SQL Server, vous devez vous assurer que les extensions PHP sqlsrvet pdo_sqlsrvPHP sont installées ainsi que toutes les dépendances dont elles peuvent avoir besoin, telles que le pilote ODBC Microsoft SQL.

Configuration à l'aide d'URL
Généralement, les connexions à la base de données sont configurées à l'aide de plusieurs valeurs de configuration telles que host, database, username, password, etc. Chacune de ces valeurs de configuration a sa propre variable d'environnement correspondante. Cela signifie que lors de la configuration de vos informations de connexion à la base de données sur un serveur de production, vous devez gérer plusieurs variables d'environnement.

Certains fournisseurs de bases de données gérées tels qu'AWS et Heroku fournissent une seule "URL" de base de données qui contient toutes les informations de connexion pour la base de données dans une seule chaîne. Un exemple d'URL de base de données peut ressembler à ceci :

mysql://root:password@127.0.0.1/forge?charset=UTF-8

Ces URL suivent généralement une convention de schéma standard :

driver://username:password@host:port/database?options

Pour plus de commodité, Laravel prend en charge ces URL comme alternative à la configuration de votre base de données avec plusieurs options de configuration. Si l' option de configuration url(ou DATABASE_URLla variable d'environnement correspondante) est présente, elle sera utilisée pour extraire la connexion à la base de données et les informations d'identification.

Connexions en lecture et en écriture
Parfois, vous souhaiterez peut-être utiliser une connexion à la base de données pour les instructions SELECT et une autre pour les instructions INSERT, UPDATE et DELETE. Laravel en fait un jeu d'enfant, et les connexions appropriées seront toujours utilisées, que vous utilisiez des requêtes brutes, le générateur de requêtes ou l'ORM Eloquent.

Pour voir comment les connexions en lecture/écriture doivent être configurées, regardons cet exemple :

'mysql' => [
    'read' => [
        'host' => [
            '192.168.1.1',
            '196.168.1.2',
        ],
    ],
    'write' => [
        'host' => [
            '196.168.1.3',
        ],
    ],
    'sticky' => true,
    'driver' => 'mysql',
    'database' => 'database',
    'username' => 'root',
    'password' => '',
    'charset' => 'utf8mb4',
    'collation' => 'utf8mb4_unicode_ci',
    'prefix' => '',
],

Notez que trois clés ont été ajoutées au tableau de configuration : read, writeet sticky. Les clés readet writeont des valeurs de tableau contenant une seule clé : host. Le reste des options de base de données pour les connexions readet writesera fusionné à partir du mysqltableau de configuration principal.

Vous n'avez besoin de placer des éléments dans les tableaux readet writeque si vous souhaitez remplacer les valeurs du mysqltableau principal. Ainsi, dans ce cas, 192.168.1.1sera utilisé comme hôte pour la connexion "lecture", tandis que 192.168.1.3sera utilisé pour la connexion "écriture". Les informations d'identification de la base de données, le préfixe, le jeu de caractères et toutes les autres options du mysqltableau principal seront partagés entre les deux connexions. Lorsque plusieurs valeurs existent dans le hosttableau de configuration, un hôte de base de données sera choisi au hasard pour chaque requête.

L' stickyOption
L' stickyoption est une valeur facultative qui peut être utilisée pour permettre la lecture immédiate des enregistrements qui ont été écrits dans la base de données pendant le cycle de requête en cours. Si l' stickyoption est activée et qu'une opération "d'écriture" a été effectuée sur la base de données pendant le cycle de requête en cours, toute autre opération de "lecture" utilisera la connexion "d'écriture". Cela garantit que toutes les données écrites pendant le cycle de requête peuvent être immédiatement relues à partir de la base de données pendant cette même requête. C'est à vous de décider s'il s'agit du comportement souhaité pour votre application.

Exécution de requêtes SQL
Une fois que vous avez configuré votre connexion à la base de données, vous pouvez exécuter des requêtes à l'aide de la DBfaçade. La DBfaçade fournit des méthodes pour chaque type de requête : select, update, insert, deleteet statement.

Exécution d'une requête de sélection
Pour exécuter une requête SELECT de base, vous pouvez utiliser la selectméthode sur la DBfaçade :

<?php
 
namespace App\Http\Controllers;
 
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\DB;
 
class UserController extends Controller
{
    /**
     * Show a list of all of the application's users.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $users = DB::select('select * from users where active = ?', [1]);
 
        return view('user.index', ['users' => $users]);
    }
}

Le premier argument passé à la selectméthode est la requête SQL, tandis que le second argument est toute liaison de paramètre qui doit être liée à la requête. En règle générale, il s'agit des valeurs des wherecontraintes de clause. La liaison de paramètres fournit une protection contre l'injection SQL.

La selectméthode renverra toujours un arraydes résultats. Chaque résultat dans le tableau sera un stdClassobjet PHP représentant un enregistrement de la base de données :

use Illuminate\Support\Facades\DB;
 
$users = DB::select('select * from users');
 
foreach ($users as $user) {
    echo $user->name;
}

Sélection de valeurs scalaires
Parfois, votre requête de base de données peut aboutir à une seule valeur scalaire. Au lieu d'être obligé de récupérer le résultat scalaire de la requête à partir d'un objet record, Laravel vous permet de récupérer cette valeur directement à l'aide de la scalarméthode :

$burgers = DB::scalar(
    "select count(case when food = 'burger' then 1 end) as burgers from menu"
);

Utilisation de liaisons nommées
Au lieu d'utiliser ?pour représenter vos liaisons de paramètres, vous pouvez exécuter une requête à l'aide de liaisons nommées :

$results = DB::select('select * from users where id = :id', ['id' => 1]);

Exécution d'une instruction d'insertion
Pour exécuter une insertinstruction, vous pouvez utiliser la insertméthode sur la DBfaçade. Comme select, cette méthode accepte la requête SQL comme premier argument et les liaisons comme deuxième argument :

use Illuminate\Support\Facades\DB;
 
DB::insert('insert into users (id, name) values (?, ?)', [1, 'Marc']);

Exécution d'une instruction de mise à jour
La updateméthode doit être utilisée pour mettre à jour les enregistrements existants dans la base de données. Le nombre de lignes affectées par l'instruction est renvoyé par la méthode :

use Illuminate\Support\Facades\DB;
 
$affected = DB::update(
    'update users set votes = 100 where name = ?',
    ['Anita']
);

Exécution d'une instruction de suppression
La deleteméthode doit être utilisée pour supprimer des enregistrements de la base de données. Comme update, le nombre de lignes affectées sera renvoyé par la méthode :

use Illuminate\Support\Facades\DB;
 
$deleted = DB::delete('delete from users');

Exécution d'une instruction générale
Certaines instructions de base de données ne renvoient aucune valeur. Pour ces types d'opérations, vous pouvez utiliser la statementméthode sur la DBfaçade :

DB::statement('drop table users');

Exécution d'une instruction non préparée
Parfois, vous souhaiterez peut-être exécuter une instruction SQL sans lier aucune valeur. Vous pouvez utiliser la méthode de la DBfaçade unpreparedpour accomplir ceci :

DB::unprepared('update users set votes = 100 where name = "Dries"');


Étant donné que les instructions non préparées ne lient pas les paramètres, elles peuvent être vulnérables à l'injection SQL. Vous ne devez jamais autoriser les valeurs contrôlées par l'utilisateur dans une instruction non préparée.


Commits implicites
Lors de l'utilisation des méthodes et DBde la façade dans les transactions, vous devez faire attention à éviter les instructions qui provoquent des commits implicites . Ces instructions amèneront le moteur de base de données à valider indirectement l'intégralité de la transaction, laissant Laravel inconscient du niveau de transaction de la base de données. Un exemple d'une telle instruction est la création d'une table de base de données :statementunprepared

DB::unprepared('create table a (col varchar(1) null)');

Veuillez vous référer au manuel MySQL pour une liste de toutes les instructions qui déclenchent des commits implicites.

Utilisation de plusieurs connexions à la base de données
Si votre application définit plusieurs connexions dans votre config/database.phpfichier de configuration, vous pouvez accéder à chaque connexion via la connectionméthode fournie par la DBfaçade. Le nom de connexion passé à la connectionméthode doit correspondre à l'une des connexions répertoriées dans votre config/database.phpfichier de configuration ou configurées lors de l'exécution à l'aide de l' configassistant :

use Illuminate\Support\Facades\DB;
 
$users = DB::connection('sqlite')->select(/* ... */);

Vous pouvez accéder à l'instance PDO brute sous-jacente d'une connexion en utilisant la getPdométhode sur une instance de connexion :

$pdo = DB::connection()->getPdo();

Écoute des événements de requête
Si vous souhaitez spécifier une fermeture qui est invoquée pour chaque requête SQL exécutée par votre application, vous pouvez utiliser la méthode DBde la façade listen. Cette méthode peut être utile pour la journalisation des requêtes ou le débogage. Vous pouvez enregistrer la fermeture de votre écouteur de requête dans la bootméthode d'un fournisseur de services :

<?php
 
namespace App\Providers;
 
use Illuminate\Support\Facades\DB;
use Illuminate\Support\ServiceProvider;
 
class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        //
    }
 
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        DB::listen(function ($query) {
            // $query->sql;
            // $query->bindings;
            // $query->time;
        });
    }
}

Surveillance du temps de requête cumulé
Un goulot d'étranglement courant des performances des applications Web modernes est le temps qu'elles passent à interroger les bases de données. Heureusement, Laravel peut invoquer une fermeture ou un rappel de votre choix lorsqu'il passe trop de temps à interroger la base de données au cours d'une seule requête. Pour commencer, fournissez un seuil de temps de requête (en millisecondes) et une fermeture à la whenQueryingForLongerThanméthode. Vous pouvez invoquer cette méthode dans la bootméthode d'un fournisseur de services :

<?php
 
namespace App\Providers;
 
use Illuminate\Database\Connection;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\ServiceProvider;
 
class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        //
    }
 
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        DB::whenQueryingForLongerThan(500, function (Connection $connection) {
            // Notify development team...
        });
    }
}

Transactions de base de données
Vous pouvez utiliser la transactionméthode fournie par la DBfaçade pour exécuter un ensemble d'opérations dans une transaction de base de données. Si une exception est levée lors de la clôture de la transaction, la transaction sera automatiquement annulée et l'exception sera à nouveau levée. Si la fermeture s'exécute avec succès, la transaction sera automatiquement validée. Vous n'avez pas à vous soucier de la restauration manuelle ou de la validation lorsque vous utilisez la transactionméthode :

use Illuminate\Support\Facades\DB;
 
DB::transaction(function () {
    DB::update('update users set votes = 1');
 
    DB::delete('delete from posts');
});

Gestion des blocages
La transactionméthode accepte un deuxième argument facultatif qui définit le nombre de fois qu'une transaction doit être réessayée lorsqu'un blocage se produit. Une fois ces tentatives épuisées, une exception sera levée :

use Illuminate\Support\Facades\DB;
 
DB::transaction(function () {
    DB::update('update users set votes = 1');
 
    DB::delete('delete from posts');
}, 5);

Utilisation manuelle des transactions
Si vous souhaitez démarrer une transaction manuellement et avoir un contrôle total sur les rollbacks et les commits, vous pouvez utiliser la beginTransactionméthode fournie par la DBfaçade :

use Illuminate\Support\Facades\DB;
 
DB::beginTransaction();

Vous pouvez annuler la transaction via la rollBackméthode :

DB::rollBack();

Enfin, vous pouvez valider une transaction via la commitméthode :

DB::commit();


Les DBméthodes de transaction de la façade contrôlent les transactions à la fois pour le générateur de requêtes et pour Eloquent ORM .


Connexion à la CLI de la base de données
Si vous souhaitez vous connecter à la CLI de votre base de données, vous pouvez utiliser la dbcommande Artisan :

php artisan db

Si nécessaire, vous pouvez spécifier un nom de connexion à la base de données pour vous connecter à une connexion à la base de données qui n'est pas la connexion par défaut :

php artisan db mysql